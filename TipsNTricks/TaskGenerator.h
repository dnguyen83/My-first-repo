#ifndef TASK_GENERATOR_H
#define	TASK_GENERATOR_H

#include <string>
#include <vector>

class TaskGenerator {
public:

	enum Tasks{
		RANDOM_NUMBER = 0,
		ABSTRACT_FACTORY,
		BINARY_TREE,
		BUILDER,
		FACTORY_METHOD,
		OBJECT_POOL,
		PROTOTYPE,
		SINGLETON,
		ADAPTER,
		BRIDGE,
		COMPOSITE,
		DECORATOR,
		FACADE,
		FLY_WEIGHT,
		PRIVATE_CLASS_DATA,
		PROXY,
		CHAIN_OF_RESPONSIBILITY,
		COMMAND,
		INTERPRETER,
		MEDIATOR,
		MEMENTO,
		NULL_OBJECT,
		OBSERVER,
		STATE,
		STRATEGY,
		TEMPLATE_METHOD,
		VISITOR,
		BITWISE_OPERATIONS,
		SORTING_TECHNIQUES,
		THREADING,
		STRING_MANIPULATION,
		MESSAGE_AND_EVENT_DRIVEN_PROGRAMMING,
		PREPROCESSOR_TECHNIQUES,
		SEARCH_TECHNIQUES,
		TEMPLATE_PROGRAMMING,
		TIMER_AND_TIME_OPERATIONS,
		COMMAND_LINE_PROGRAM,
		POINTERS,
		ARTIFICIAL_INTELLIGENT,
		FILE_OPERATIONS,
		C_PLUS_PLUS_EVELEN,
		STL_PROGRAMMING,
		MEMORY_POOL,
		NETWORK_PROGRAMMING_TECHS,
		TASK_MAX_NUM
	};

	void printTask();
private:

};

#endif //TASK_GENERATOR_H